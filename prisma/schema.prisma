// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Orders table
model Order {
  id                BigInt      @id @default(autoincrement())
  orderNumber       String      @unique @map("order_number") @db.VarChar(50)
  userId            BigInt      @map("user_id")
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED) @map("fulfillment_status")
  totalAmount       Decimal     @map("total_amount") @db.Decimal(12, 2)
  subtotal          Decimal     @db.Decimal(12, 2)
  taxAmount         Decimal     @default(0) @map("tax_amount") @db.Decimal(12, 2)
  shippingAmount    Decimal     @default(0) @map("shipping_amount") @db.Decimal(12, 2)
  discountAmount    Decimal     @default(0) @map("discount_amount") @db.Decimal(12, 2)
  currency          String      @default("INR") @db.VarChar(3)
  shippingAddress   Json        @map("shipping_address")
  billingAddress    Json        @map("billing_address")
  notes             String?
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  shippedAt         DateTime?   @map("shipped_at")
  deliveredAt       DateTime?   @map("delivered_at")
  cancelledAt       DateTime?   @map("cancelled_at")

  // Relations
  orderItems        OrderItem[]
  payments          Payment[]
  shipments         Shipment[]
  returns           Return[]
  refunds           Refund[]

  // Indexes
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([fulfillmentStatus])
  @@index([createdAt])
  @@index([orderNumber])
  @@map("orders")
}

// Order items table
model OrderItem {
  id          BigInt   @id @default(autoincrement())
  orderId     BigInt   @map("order_id")
  productId   String   @map("product_id") @db.VarChar(100)
  variantId   String?  @map("variant_id") @db.VarChar(100)
  sku         String   @db.VarChar(100)
  name        String   @db.VarChar(255)
  description String?
  quantity    Int
  unitPrice   Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice  Decimal  @map("total_price") @db.Decimal(12, 2)
  taxRate     Decimal  @default(0) @map("tax_rate") @db.Decimal(5, 2)
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([orderId])
  @@index([productId])
  @@index([sku])
  @@map("order_items")
}

// Payments table
model Payment {
  id              BigInt        @id @default(autoincrement())
  orderId         BigInt        @map("order_id")
  paymentMethod   String        @map("payment_method") @db.VarChar(50)
  paymentGateway  String        @map("payment_gateway") @db.VarChar(50)
  transactionId   String?       @unique @map("transaction_id") @db.VarChar(255)
  amount          Decimal       @db.Decimal(12, 2)
  currency        String        @default("INR") @db.VarChar(3)
  status          PaymentStatus @default(PENDING)
  gatewayResponse Json?         @map("gateway_response")
  processedAt     DateTime?     @map("processed_at")
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  refunds         Refund[]

  // Indexes
  @@index([orderId])
  @@index([status])
  @@index([transactionId])
  @@index([createdAt])
  @@map("payments")
}

// Shipments table
model Shipment {
  id                BigInt            @id @default(autoincrement())
  orderId           BigInt            @map("order_id")
  trackingNumber    String?           @unique @map("tracking_number") @db.VarChar(100)
  carrier           String            @db.VarChar(100)
  serviceType       String?           @map("service_type") @db.VarChar(100)
  status            ShipmentStatus    @default(PENDING)
  shippedAt         DateTime?         @map("shipped_at")
  deliveredAt       DateTime?         @map("delivered_at")
  estimatedDelivery DateTime?         @map("estimated_delivery")
  trackingUrl       String?           @map("tracking_url")
  createdAt         DateTime          @default(now()) @map("created_at")

  // Relations
  order             Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([orderId])
  @@index([status])
  @@index([trackingNumber])
  @@index([carrier])
  @@map("shipments")
}

// Returns table
model Return {
  id           BigInt       @id @default(autoincrement())
  orderId      BigInt       @map("order_id")
  returnNumber String       @unique @map("return_number") @db.VarChar(50)
  reason       String       @db.VarChar(100)
  status       ReturnStatus @default(PENDING)
  requestedAt  DateTime     @default(now()) @map("requested_at")
  approvedAt   DateTime?    @map("approved_at")
  processedAt  DateTime?    @map("processed_at")
  refundAmount Decimal?     @map("refund_amount") @db.Decimal(12, 2)
  notes        String?

  // Relations
  order        Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([orderId])
  @@index([status])
  @@index([returnNumber])
  @@map("returns")
}

// Refunds table
model Refund {
  id        BigInt        @id @default(autoincrement())
  orderId   BigInt        @map("order_id")
  paymentId BigInt        @map("payment_id")
  amount    Decimal       @db.Decimal(12, 2)
  reason    String        @db.VarChar(100)
  status    RefundStatus  @default(PENDING)
  processedAt DateTime?   @map("processed_at")
  createdAt DateTime      @default(now()) @map("created_at")

  // Relations
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  payment   Payment       @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([orderId])
  @@index([paymentId])
  @@index([status])
  @@map("refunds")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  FULFILLED
  PARTIALLY_FULFILLED
  CANCELLED
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
  CANCELLED
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
